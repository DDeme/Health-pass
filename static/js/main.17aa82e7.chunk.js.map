{"version":3,"sources":["serviceWorker.ts","i18n/index.tsx","styles/theme/index.ts","styles/index.tsx","components/Icon/index.tsx","Pages/Loading/index.tsx","Pages/Home/index.tsx","Pages/Login/index.tsx","Pages/Result/index.tsx","Pages/NotFound/index.tsx","Layout/index.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","i18n","use","Backend","LanguageDetector","initReactI18next","init","react","useSuspense","wait","lng","fallbackLng","whitelist","lowerCaseLng","debug","interpolation","escapeValue","saveMissing","saveMissingTo","backend","loadPath","Translater","props","children","theme","mode","process","env","NODE_ENV","fontFamily","fontSize","color","white","black","green","red","blue","purple","GlobalStyle","createGlobalStyle","Styler","WrapperIcon","styled","i","Icon","name","className","WrapperIcons","ul","WrapperIconsItem","li","WrapperIconsTitle","button","Icons","icons","require","map","icon","text","properties","key","variant","onClick","clipboard","writeText","Navigation","Wrapper","div","Logo","Title","h1","Loader","Spinner","Laoding","history","useHistory","useState","loading","setLoading","t","useTranslation","useEffect","timer","setTimeout","clearTimeout","animation","H1","Home","Container","Login","Result","NotFound","Row","Col","WrapperNavbar","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","Nav","Brand","Link","href","ContainerB","Layout","Suspense","fallback","Loading","path","exact","Root","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"k/PAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,oCClGjEC,IAEEC,IAAIC,KAGJD,IAAIE,KAEJF,IAAIG,KAGJC,KAAK,CAGLC,MAAO,CACNC,aAAa,EACbC,MAAM,GAEPC,IAAK,KACLC,YAAa,KACbC,UAAW,CAAC,KAAM,MAClBC,cAAc,EACdC,OAAO,EACPC,cAAe,CACdC,aAAa,GAEdC,aAAa,EACbC,cAAe,MACfC,QAAS,CACRC,SAAU,wCAIb,IAIeC,EAJQ,SAACC,GACvB,OAAO,kBAAC,IAAD,CAAiBrB,KAAMA,KAAOqB,EAAMC,W,oCCrB7BC,EAfH,CACXC,K,OAAMC,EAAQC,IAAIC,SAClBC,WAAY,+BACZC,SAAU,OACVC,MAAO,CACNC,MAAO,OACPC,MAAO,OACPC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,Y,8LCLV,IAAMC,EAAcC,YAAH,KAEA,qBAAGf,MAAkBK,cACvB,qBAAGL,MAAkBM,YAEd,qBAAGN,MAA0BO,MAAMM,UAW1CG,EAPI,SAAClB,GAAD,OAClB,kBAAC,IAAD,CAAeE,MAAOA,GACrB,kBAACc,EAAD,MACChB,EAAMC,W,i2BCdT,IAAMkB,EAA+BC,IAAOC,EAAV,KAW5BC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAT,OACjB,kBAACL,EAAD,CAAaK,UAAS,oBAAeD,EAAf,YAAuBC,EAAvB,cAGjBC,EAAmBL,IAAOM,GAAV,KACZ,qBAAGxB,MAAkBO,MAAMC,SAQ/BiB,EAAuBP,IAAOQ,GAAV,KAWpBC,EAAyBT,IAAOU,OAAV,KAIb,qBAAG5B,MAAkBO,MAAMC,SACrB,qBAAGR,MAAkBO,MAAMC,SACtC,qBAAGR,MAAkBO,MAAME,SAIrB,qBAAGT,MAAkBO,MAAME,SACrB,qBAAGT,MAAkBO,MAAME,SACtC,qBAAGT,MAAkBO,MAAMC,SAKhCqB,EAAa,WAAY,IACtBC,EAAUC,EAAQ,IAAlBD,MAER,OACC,kBAACP,EAAD,KACC,oEACCO,EAAME,KAAI,SAACC,EAAMd,GACjB,IAAMe,EAAI,sBAAkBD,EAAKE,WAAWd,KAAlC,QACV,OACC,kBAACI,EAAD,CAAkBW,IAAKjB,GACtB,kBAAC,EAAD,CAAME,KAAMY,EAAKE,WAAWd,OAC5B,kBAACM,EAAD,CACCU,QAAQ,YACRC,QAAS,kBAAM9E,UAAU+E,UAAUC,UAAUN,KAC5CA,SASOd,I,qrBCzEf,IAAMqB,EAAa,WAClB,OAAO,oDAGFC,EAAcxB,IAAOyB,IAAV,KAQXC,EAAO1B,YAAOE,EAAPF,CAAH,KAEA,qBAAGlB,MAAkBO,MAAMC,SAI/BqC,EAAQ3B,IAAO4B,GAAV,KAED,qBAAG9C,MAAkBO,MAAMC,SAK/BuC,EAAS7B,YAAO8B,IAAP9B,CAAH,KACF,qBAAGlB,MAAkBO,MAAMC,SAoCtByC,EA5BC,WACf,IAAIC,EAAUC,cADO,EAESC,oBAAS,GAFlB,mBAEdC,EAFc,KAELC,EAFK,KAGbC,EAAMC,cAAND,EAeR,OAbApF,QAAQC,IAAI8E,GAEZO,qBAAU,WAET,IAAMC,EAAQC,YAAW,WACxBL,GAAW,KAGT,KAEH,OAAO,kBAAMM,aAAaF,MACxB,IAGF,kBAAChB,EAAD,KACC,kBAACE,EAAD,CAAMvB,KAAK,WACX,kBAACwB,EAAD,KAAQU,EAAE,kBACTF,GAAW,kBAACN,EAAD,CAAQc,UAAU,WAC9B,kBAAC,EAAD,Q,8FC5DH,IAAMC,EAAS5C,IAAO4B,GAAV,KAQGiB,EAJE,WAChB,OAAO,kBAACD,EAAD,c,mRCLR,IAAMpB,EAAcxB,YAAO8C,IAAP9C,CAAH,KAOX4C,EAAS5C,IAAO4B,GAAV,KACF,qBAAG9C,MAAkBO,MAAMC,SAYtByD,GARG,WACjB,OACC,kBAAC,EAAD,KACC,kBAAC,EAAD,gB,gGCfH,IAAMH,GAAS5C,IAAO4B,GAAV,MAYGoB,GARI,WAClB,OACC,kBAACF,EAAA,EAAD,KACC,kBAAC,GAAD,iB,kBCAYG,GATE,kBAChB,kBAACC,GAAA,EAAD,KACC,kBAACC,GAAA,EAAD,KACC,kCACA,mD,uiBCCH,IAAMC,GAAgBpD,IAAOyB,IAAV,MACP,kBAA8B,QAA9B,EAAG3C,MAAkBC,MAAkB,UA8B7CwC,GAAiB,kBACtB,kBAAC6B,GAAD,KACC,kBAACC,GAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACzB,kBAACF,GAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7B,kBAACJ,GAAA,EAAOK,SAAR,CAAiBC,GAAG,oBACnB,kBAACC,GAAA,EAAD,CAAKxD,UAAU,WACd,kBAACiD,GAAA,EAAD,CAAQC,GAAG,SACV,kBAACD,GAAA,EAAOQ,MAAR,eAED,kBAACD,GAAA,EAAIE,KAAL,CAAUC,KAAK,YAAf,aACA,kBAACH,GAAA,EAAIE,KAAL,CAAUC,KAAK,KAAf,WACA,kBAACH,GAAA,EAAIE,KAAL,CAAUC,KAAK,UAAf,SACA,kBAACH,GAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,QACA,kBAACH,GAAA,EAAIE,KAAL,CAAUC,KAAK,WAAf,UACA,kBAACV,GAAA,EAAD,CAAQC,GAAG,SACV,kBAACD,GAAA,EAAOQ,MAAR,kBAED,kBAACD,GAAA,EAAIE,KAAL,CAAUC,KAAK,kBAAf,cAYCjB,GAAY9C,YAAOgE,IAAPhE,CAAH,MA6CAiE,GAzCK,WACnB,OACC,kBAAC,GAAD,KACC,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,kBAACC,EAAD,OACzB,kBAAC,IAAD,KACC,kBAAC,GAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,aACX,kBAAC,GAAD,OAED,kBAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,KACjB,kBAACD,EAAD,OAED,kBAAC,IAAD,CAAOC,KAAK,SACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,UACX,kBAAC,GAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,WACX,kBAAC,GAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,kBACX,kBAAC,EAAD,YCtFDE,GAAO,kBACZ,kBAAC,aAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,GAAD,UAMJC,IAASC,OAAO,kBAAC,GAAD,MAAUC,SAASC,eAAe,SXQ3C,SAAkBtI,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIsI,IACpB5F,eACAjD,OAAOC,SAAS+H,MAEJc,SAAW9I,OAAOC,SAAS6I,OAIvC,OAGF9I,OAAO+I,iBAAiB,QAAQ,WAC9B,IAAM1I,EAAK,UAAM4C,eAAN,sBAEPnD,IAgEV,SAAiCO,EAAeC,GAE9C0I,MAAM3I,EAAO,CACX4I,QAAS,CAAE,iBAAkB,YAE5BvI,MAAK,SAAAwI,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/I,UAAUC,cAAc+I,MAAM7I,MAAK,SAAAC,GACjCA,EAAa6I,aAAa9I,MAAK,WAC7BV,OAAOC,SAASwJ,eAKpBrJ,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAuI,CAAwBrJ,EAAOC,GAI/BC,UAAUC,cAAc+I,MAAM7I,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OWlC/BE,K","file":"static/js/main.17aa82e7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC } from 'react'\nimport i18n from 'i18next'\nimport Backend from 'i18next-xhr-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport { initReactI18next, I18nextProvider } from 'react-i18next'\n\ni18n\n\t// learn more: https://github.com/i18next/i18next-xhr-backend\n\t.use(Backend)\n\t// detect user language\n\t// learn more: https://github.com/i18next/i18next-browser-languageDetector\n\t.use(LanguageDetector)\n\t// pass the i18n instance to react-i18next.\n\t.use(initReactI18next)\n\t// init i18next\n\t// for all options read: https://www.i18next.com/overview/configuration-options\n\t.init({\n\t\t// special options for react-i18next\n\t\t// learn more: https://react.i18next.com/components/i18next-instance\n\t\treact: {\n\t\t\tuseSuspense: false,\n\t\t\twait: true,\n\t\t},\n\t\tlng: 'en',\n\t\tfallbackLng: 'en',\n\t\twhitelist: ['en', 'sk'],\n\t\tlowerCaseLng: true,\n\t\tdebug: false,\n\t\tinterpolation: {\n\t\t\tescapeValue: false, // not needed for react as it escapes by default\n\t\t},\n\t\tsaveMissing: true,\n\t\tsaveMissingTo: 'all',\n\t\tbackend: {\n\t\t\tloadPath: '/locales/{{lng}}/translations.json',\n\t\t},\n\t})\n\nconst Translater: FC = (props: { children?: React.ReactNode }): JSX.Element => {\n\treturn <I18nextProvider i18n={i18n}>{props.children}</I18nextProvider>\n}\n\nexport default Translater\n","//@ts-check\nimport process from 'process'\n\nlet theme = {\n\tmode: process.env.NODE_ENV,\n\tfontFamily: 'Arial, Helvetica, sans-serif',\n\tfontSize: '16px',\n\tcolor: {\n\t\twhite: '#fff',\n\t\tblack: '#000',\n\t\tgreen: '#5CB85C',\n\t\tred: '#D9534F',\n\t\tblue: '#0275D8',\n\t\tpurple: '#6202EE',\n\t},\n}\n\nexport type ThemeI = typeof theme\nexport default theme\n","//@ts-check\nimport React, { FC } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './reset.css'\n\nimport { ThemeProvider, createGlobalStyle } from 'styled-components'\nimport theme, { ThemeI } from './theme'\n\nconst GlobalStyle = createGlobalStyle<{ theme: ThemeI }>`\n  html, body, #root {\n\t\tfont-family: ${({ theme }) => theme.fontFamily};\n\t\tfont-size: ${({ theme }) => theme.fontSize};\n\t\theight: 100%;\n\t\tbackground-color: ${({ theme }): string => theme.color.purple};\n  }\n`\n\nconst Styler: FC = (props): JSX.Element => (\n\t<ThemeProvider theme={theme}>\n\t\t<GlobalStyle />\n\t\t{props.children}\n\t</ThemeProvider>\n)\n\nexport default Styler\n","//@ts-check\nimport React, { FC } from 'react'\nimport './style.css'\n\nimport styled from 'styled-components'\n\nconst WrapperIcon: FC<StyledProps> = styled.i``\n\ninterface StyledProps {\n\tclassName?: string\n}\n\ninterface IconProps {\n\tname: string\n\tclassName?: string\n}\n\nconst Icon: any = ({ name, className }): any => (\n\t<WrapperIcon className={`icon icon-${name} ${className} rotate`} />\n)\n\nconst WrapperIcons: FC = styled.ul`\n\tcolor: ${({ theme }) => theme.color.white};\n\tdisplay: flex;\n\talign-items: center;\n\tflex-direction: column;\n\tjustify-content: center;\n\toverflow: hidden;\n`\n\nconst WrapperIconsItem: FC = styled.li`\n\tdisplay: flex;\n\talign-items: center;\n\tflex-direction: column;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n\tflex: 1;\n\tpadding: 15px;\n\tfont-size: 30px;\n`\n\nconst WrapperIconsTitle: any = styled.button`\n\tmargin-top: 10px;\n\tfont-size: 16px;\n\tpadding: 5px 12px;\n\tbackground: ${({ theme }) => theme.color.white};\n\tborder: 1px solid ${({ theme }) => theme.color.white};\n\tcolor: ${({ theme }) => theme.color.black};\n\tborder-radius: 3px;\n\n\t&:hover {\n\t\tbackground: ${({ theme }) => theme.color.black};\n\t\tborder: 1px solid ${({ theme }) => theme.color.black};\n\t\tcolor: ${({ theme }) => theme.color.white};\n\t\ttransition: all 0.5s;\n\t}\n`\n\nconst Icons: any = (): any => {\n\tconst { icons } = require('./selection.json')\n\n\treturn (\n\t\t<WrapperIcons>\n\t\t\t<h1>Copy your icon by click on one item:</h1>\n\t\t\t{icons.map((icon, i): any => {\n\t\t\t\tconst text = `<Icon name=\"${icon.properties.name}\" />`\n\t\t\t\treturn (\n\t\t\t\t\t<WrapperIconsItem key={i}>\n\t\t\t\t\t\t<Icon name={icon.properties.name} />\n\t\t\t\t\t\t<WrapperIconsTitle\n\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\tonClick={() => navigator.clipboard.writeText(text)}>\n\t\t\t\t\t\t\t{text}\n\t\t\t\t\t\t</WrapperIconsTitle>\n\t\t\t\t\t</WrapperIconsItem>\n\t\t\t\t)\n\t\t\t})}\n\t\t</WrapperIcons>\n\t)\n}\n\nexport default Icon\nexport { Icons }\n","//@ts-check\nimport React, { FC, useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { Spinner } from 'react-bootstrap'\nimport { useTranslation } from 'react-i18next'\nimport { Icon } from '../../components'\n\nconst Navigation = () => {\n\treturn <div>See My certificate</div>\n}\n\nconst Wrapper: FC = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tflex-direction: column;\n\tjustify-content: center;\n\theight: 100%;\n`\n\nconst Logo = styled(Icon)`\n\ttext-transform: uppercase;\n\tcolor: ${({ theme }) => theme.color.white};\n\tfont-size: 180px;\n`\n\nconst Title = styled.h1`\n\ttext-transform: uppercase;\n\tcolor: ${({ theme }) => theme.color.white};\n\tmargin-top: 30px;\n\tfont-size: 24px;\n`\n\nconst Loader = styled(Spinner)`\n\tcolor: ${({ theme }) => theme.color.white};\n\tmargin-top: 30px;\n\twidth: 60px;\n\theight: 60px;\n\tborder-width: 8px;\n\tborder-right-color: transparent;\n`\n\nconst Laoding = () => {\n\tlet history = useHistory()\n\tconst [loading, setLoading] = useState(true)\n\tconst { t } = useTranslation()\n\n\tconsole.log(history)\n\n\tuseEffect(() => {\n\t\t// TODO start page\n\t\tconst timer = setTimeout(() => {\n\t\t\tsetLoading(false)\n\t\t\t// TODO redirect to home\n\t\t\t// return history.push('/home')\n\t\t}, 500)\n\n\t\treturn () => clearTimeout(timer)\n\t}, [])\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Logo name=\"shield\" />\n\t\t\t<Title>{t('welcome.title')}</Title>\n\t\t\t{loading && <Loader animation=\"border\" />}\n\t\t\t<Navigation />\n\t\t</Wrapper>\n\t)\n}\n\nexport default Laoding\n","//@ts-check\nimport React, { FC } from 'react'\nimport styled from 'styled-components'\n// import { Container, Row, Col } from 'react-bootstrap'\n\nconst H1: FC = styled.h1`\n\ttext-align: center;\n`\n\nconst Home: FC = (): JSX.Element => {\n\treturn <H1>Home</H1>\n}\n\nexport default Home\n","//@ts-check\nimport React, { FC } from 'react'\nimport styled from 'styled-components'\nimport { Container } from 'react-bootstrap'\n\nconst Wrapper: FC = styled(Container)`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\theight: 100%;\n`\n\nconst H1: FC = styled.h1`\n\tcolor: ${({ theme }) => theme.color.white};\n\ttext-align: center;\n`\n\nconst Login: FC = (): JSX.Element => {\n\treturn (\n\t\t<Wrapper>\n\t\t\t<H1>Login</H1>\n\t\t</Wrapper>\n\t)\n}\n\nexport default Login\n","//@ts-check\nimport React, { FC } from 'react'\nimport styled from 'styled-components'\nimport { Container } from 'react-bootstrap'\n\nconst H1: FC = styled.h1`\n\ttext-align: center;\n`\n\nconst Result: FC = (): JSX.Element => {\n\treturn (\n\t\t<Container>\n\t\t\t<H1>Result</H1>\n\t\t</Container>\n\t)\n}\n\nexport default Result\n","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\n\nconst NotFound = () => (\n\t<Row>\n\t\t<Col>\n\t\t\t<p>404</p>\n\t\t\t<p>Page not found - </p>\n\t\t</Col>\n\t</Row>\n)\n\nexport default NotFound\n","//@ts-check\nimport React, { FC } from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { Icons } from '../components'\nimport { Home, Login, Loading, Result, NotFound } from '../Pages'\nimport { Container as ContainerB, Nav, Navbar } from 'react-bootstrap'\nimport styled from 'styled-components'\n\nconst WrapperNavbar = styled.div`\n\tdisplay: ${({ theme }) => theme.mode !== 'dev' && 'none'};\n\n\tnav {\n\t\tpadding: 0;\n\t}\n\n\tbutton {\n\t\tfont-size: 8px;\n\t\tpadding: 2px;\n\t}\n\n\tdisplay: inline-block;\n\tposition: fixed;\n\tleft: 0;\n\tborder-bottom-right-radius: 5px;\n\toverflow: hidden;\n\n\t&:focus,\n\t&:hover {\n\t\tnav {\n\t\t\tpadding: 5px;\n\t\t}\n\n\t\tbutton {\n\t\t\tfont-size: 15px;\n\t\t\tpadding: 4px 12px;\n\t\t}\n\t}\n`\n\nconst Navigation: FC = () => (\n\t<WrapperNavbar>\n\t\t<Navbar bg=\"light\" expand=\"lg\">\n\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t<Navbar bg=\"light\">\n\t\t\t\t\t\t<Navbar.Brand>Pages</Navbar.Brand>\n\t\t\t\t\t</Navbar>\n\t\t\t\t\t<Nav.Link href=\"notFound\">Not Found</Nav.Link>\n\t\t\t\t\t<Nav.Link href=\"/\">Loading</Nav.Link>\n\t\t\t\t\t<Nav.Link href=\"/login\">Login</Nav.Link>\n\t\t\t\t\t<Nav.Link href=\"/home\">Home</Nav.Link>\n\t\t\t\t\t<Nav.Link href=\"/result\">Result</Nav.Link>\n\t\t\t\t\t<Navbar bg=\"light\">\n\t\t\t\t\t\t<Navbar.Brand>Settings</Navbar.Brand>\n\t\t\t\t\t</Navbar>\n\t\t\t\t\t<Nav.Link href=\"/settings-icon\">Icons</Nav.Link>\n\t\t\t\t\t{/* \n\t\t\t\t\t\t<Nav.Link href=\"/settings-theme\">Theme</Nav.Link>\n\t\t\t\t\t\t<Nav.Link href=\"/settings-cssReset\">Reset css</Nav.Link>\n\t\t\t\t\t\t<Nav.Link href=\"/settings-translation\">Translation</Nav.Link>\n\t\t\t\t */}\n\t\t\t\t</Nav>\n\t\t\t</Navbar.Collapse>\n\t\t</Navbar>\n\t</WrapperNavbar>\n)\n\nconst Container = styled(ContainerB)`\n\theight: 100%;\n`\n\nconst Layout: any = (): any => {\n\treturn (\n\t\t<Container>\n\t\t\t<React.Suspense fallback={<Loading />}>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<Navigation />\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/notFound\">\n\t\t\t\t\t\t\t<NotFound />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t\t<Loading />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/home\">\n\t\t\t\t\t\t\t<Home />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/login\">\n\t\t\t\t\t\t\t<Login />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/result\">\n\t\t\t\t\t\t\t<Result />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/settings-icon\">\n\t\t\t\t\t\t\t<Icons />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t{/* <Route path=\"/settings-theme\">\n\t\t\t\t\t<Icons />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/settings-cssReset\">\n\t\t\t\t\t<Icons />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/settings-translation\">\n\t\t\t\t\t<Icons />\n\t\t\t\t</Route> */}\n\t\t\t\t\t</Switch>\n\t\t\t\t</BrowserRouter>\n\t\t\t</React.Suspense>\n\t\t</Container>\n\t)\n}\n\nexport default Layout\n","//@ts-check\nimport React, { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\nimport Translater from './i18n'\nimport Styler from './styles'\nimport Layout from './Layout'\n\nconst Root = () => (\n\t<StrictMode>\n\t\t<Translater>\n\t\t\t<Styler>\n\t\t\t\t<Layout />\n\t\t\t</Styler>\n\t\t</Translater>\n\t</StrictMode>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}